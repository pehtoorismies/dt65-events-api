### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String!
  expiresIn: String!
  idToken: String!
}

type BaseUser {
  email: String!
  id: String!
  name: String!
  nickname: String!
  picture: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  creator: SimpleUser!
  date: DateTime!
  description: String
  exactTime: Boolean
  id: String!
  participants: [SimpleUser!]!
  race: Boolean!
  subtitle: String
  title: String!
  type: EventType!
  updatedAt: DateTime!
}

input EventData {
  date: String!
  description: String
  exactTime: Boolean = false
  race: Boolean
  subtitle: String
  title: String!
  type: String!
}

enum EventType {
  Cycling
  Karonkka
  Meeting
  Orienteering
  Other
  Running
  Skiing
  Spinning
  Swimming
  TrackRunning
  Triathlon
  Ultras
}

type IDPayload {
  id: String!
}

type Mutation {
  batchImport: Boolean!
  createEvent(addMe: Boolean = false, event: EventData!, notifySubscribers: Boolean = true): Event!
  deleteEvent(id: ID!): IDPayload!
  forgotPassword(email: String!): Boolean!
  login(password: String!, usernameOrEmail: String!): AuthPayload!
  login_v2(password: String!, usernameOrEmail: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!, registerSecret: String!, username: String!): User!
  signup_v2(email: String!, name: String!, password: String!, registerSecret: String!, username: String!): Boolean!
  toggleJoinEvent(id: ID!): Event!
  updateEvent(event: EventData, id: ID!): Event!
  updateMe(name: String, username: String): User!
  updateMyPreferences(subscribeEventCreationEmail: Boolean, subscribeWeeklyEmail: Boolean): User!
}

type Preferences {
  subscribeEventCreationEmail: Boolean!
  subscribeWeeklyEmail: Boolean!
}

"""Queries"""
type Query {
  findEvent(id: ID!): Event!
  findManyEvents(limit: Int = 0): [Event!]!
  liveness: Boolean!
  me: User!
  readiness: Boolean!
  sendWeeklyEmail: Boolean!
  users: [BaseUser!]!
}

type SimpleUser {
  id: String!
  username: String!
}

type User {
  auth0Id: String!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  preferences: Preferences!
  updatedAt: DateTime!
  username: String!
}
