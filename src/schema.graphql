### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String!
  expiresIn: String!
  idToken: String!
}

"""DateTime"""
scalar DateTime

type Event {
  address: String
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: ID!
  participants(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  race: Boolean!
  subtitle: String!
  time: String
  title: String!
  type: EventType!
  updatedAt: DateTime!
}

"""Event Types"""
enum EventType {
  Cycling
  Karonkka
  Meeting
  Orienteering
  Other
  Running
  Skiing
  Spinning
  Swimming
  TrackRunning
  Triathlon
  Ultras
}

input EventWhereUniqueInput {
  id: ID
}

type Mutation {
  login(password: String, username: String): AuthPayload!
  signup(email: String, name: String, password: String, registerSecret: String, username: String): User!
}

"""Queries"""
type Query {
  allEvents(after: String, before: String, first: Int, last: Int, skip: Int): [Event!]
  allUsers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  event(where: EventWhereUniqueInput!): Event
  user(where: UserWhereUniqueInput!): User
}

type User {
  auth0Id: String!
  email: String!
  events(after: String, before: String, first: Int, last: Int, skip: Int): [Event!]
  id: ID!
  name: String
  username: String!
}

input UserWhereUniqueInput {
  auth0Id: String
  email: String
  id: ID
  username: String
}
